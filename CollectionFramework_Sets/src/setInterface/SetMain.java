package setInterface;

import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

public class SetMain {

	public static void main(String[] args) {
		
/*			
 			Set Interface ----> HashSet,LinkedHashSet, TreeSet
	
		    Set Interface ile List Interface’in farký
		    List interface’i implemente eden classlar bir elementten birden fazla depolayabilirken,  
		    Set interface’i implemente eden classlar bir elementten sadece bir tane depolarlar.
	
		    HashSet Sýnýfý
	
		    HashSet extends AbstractSet implements Set Interface extends Collection extends Iterable
	
		    1.HashSet elementleri "hashing" yani hash table  mekanizmasýna uygun bir biçimde depolarlar
		    (Her element belli bir key'e göre depolanýr.)
	
		    2.HashSet bir element'i sadece bir defa depolar.(Set Interface)
	
		    3. Elementlerin ekleme sýrasýna göre depolamaz.
	
		    LinkedHashSet Sýnýfý
	
		    LinkedHashSet extends HashSet extends AbstractSet implements Set Interface extends Collection extends Iterable
	
		    1. LinkedHashSet hem HashTable hem de Set Interface'in LinkedList implementasyonu gibi davranýr.
	
		    2. HashSette olduðu gibi bir elementi sadece bir defa depolar.(Set Interface)
	
		    3. Elementleri ekleme sýrasýna göre depolar.
	
	
		    TreeSet Sýnýfý
	
		    TreeSet sýnýfý NavigableSet inteface'ini implemente eder ve AbstractSet sýnýfýndan miras alýr. 
		    NavigableSet interface'i de SortedSet interfaceinden miras alýr. 
	
		    1. Elementleri depolamak için Tree yani Aðaç yapýsýný kullanýr.
	
		    2. Elementleri alfabetik olarak sýralarlar.
	
	
	
		    HashSet vs LinkedHashSet vs TreeSet
	
		    HashSet, Hash Table mekanizmasýný uyguladýðý için elementler sýralý deðildir. Ekleme,Çýkarma ve
		    Arama metodlarý sabit zamanda( Time Complexity : O(1) ) çalýþýr. 
	
		    TreeSet, elementleri tree yapýsýna yani aðaç yapýsýna uygun depolar. Ekleme,Çýkarma ve 
		    Arama metodlarý O(log(n)) complexitysi ile çalýþýr.
	
		    LinkedHashSet sýnýfý hashtable ile linked list yapýsýný kullanarak elementleri depolar.Bu yüzden,
		    elemetler ekleme sýrasýna göre depolanýr. Ekleme,Çýkarma ve Arama metodlarý 
		    sabit zamanda( Time Complexity : O(1) ) çalýþýr. 

	*/		    
		    
	/*
	 		Set<String> set1 = new HashSet<String>();
	 
		    Set<String> set2 = new LinkedHashSet<String>();
		    Set<String> set3 = new TreeSet<String>();
		           // System.out.println(set1.isEmpty());
		
		    // HashSet
		    set1.add("Java");
		    set1.add("Python");
		    set1.add("C++");
		    set1.add("Javascript");
		    set1.add("Php");
		    
		    // LinkedHashSet
		    set2.add("Java");
		    set2.add("Python");
		    set2.add("C++");
		    set2.add("Javascript");
		    set2.add("Php");
		    
		    // TreeSet
		    set3.add("Java");
		    set3.add("Python");
		    set3.add("C++");
		    set3.add("Javascript");
		    set3.add("Php");

		    set3.add("Php");
*/
	/*	    
		    System.out.println("\nHashSet********");
		    for (String s: set1){
		        System.out.println(s);
		        
		    }
		    System.out.println("\nLinkedHashSet*******");
		    for (String s: set2){
		        System.out.println(s);
		        
		    }
		    System.out.println("\nTreeSet*********");
		    for (String s: set3){
		        System.out.println(s);
		    }   
	*/
	
/*	//Contains : Set1 içerisinde o element var mý, yo mu bunun kontrolunu saðlar.
		    System.out.println(set1.contains("Java"));
		    System.out.println(set1.contains("Go"));
		    
	//isEmpty : Set1 içerisinde eleman var mý yok mu kontrol eder. var ise false, yoksa true döner.
		    System.out.println(set1.isEmpty());
		    
		    set1.remove("C#");
		    System.out.println("\nHashSet********");
		    for (String s: set1){
		        System.out.println(s);
		    }
*/		    
		
		 	Set<String> set1 = new HashSet<String>();
		    Set<String> set2 = new HashSet<String>();
		    
		    set1.add("Java");
		    set1.add("C++");
		    set1.add("Python");
		    set1.add("Javascript");
		    set1.add("Php");
		    
		    set2.add("Go");
		    set2.add("Java");
		    set2.add("CSS");
		
		//Farkýný bulma
		    System.out.println("Fark kümesi bulma");
		    Set<String> fark = new HashSet<String>(set2);
		    System.out.println(fark.removeAll(set1));
	        System.out.println(fark);
	        
	     //Kesiþim kümesini bulma
	        System.out.println("\nKesiþim kümesi");
	        Set<String> kesisim = new HashSet<String>(set2);
	        System.out.println(kesisim.retainAll(set1));
	        System.out.println(kesisim);
	}

}
